{
  "className": "qx.html.Canvas",
  "packageName": "qx.html",
  "name": "Canvas",
  "superClass": "qx.html.Element",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 22,
        "column": 0
      },
      "end": {
        "line": 130,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp:\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http:\n\nLicense:\nMIT: https:\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Managed wrapper for the HTML canvas tag."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 40,
        "column": 14
      },
      "end": {
        "line": 44,
        "column": 3
      }
    }
  },
  "members": {
    "__canvas": {
      "location": {
        "start": {
          "line": 59,
          "column": 4
        },
        "end": {
          "line": 59,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_createDomElement": {
      "location": {
        "start": {
          "line": 62,
          "column": 4
        },
        "end": {
          "line": 64,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} DOM element",
            "type": "qx.html.Element",
            "description": " DOM element"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.html.Element",
      "appearsIn": [
        "qx.html.Element"
      ]
    },
    "getCanvas": {
      "location": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 74,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the canvas element [<a href=\"http:"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The canvas DOM element.",
            "type": "qx.html.Element",
            "description": " The canvas DOM element."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setWidth": {
      "location": {
        "start": {
          "line": 83,
          "column": 4
        },
        "end": {
          "line": 85,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set the width attribute of the canvas element. This property controls the\nsize of the canvas coordinate space."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} canvas width",
            "paramName": "width",
            "description": " canvas width",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getWidth": {
      "location": {
        "start": {
          "line": 93,
          "column": 4
        },
        "end": {
          "line": 95,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the width attribute of the canvas element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} canvas width",
            "type": "Integer",
            "description": " canvas width"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setHeight": {
      "location": {
        "start": {
          "line": 104,
          "column": 4
        },
        "end": {
          "line": 106,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set the height attribute of the canvas element. This property controls the\nsize of the canvas coordinate space."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "height {Integer} canvas height",
            "paramName": "height",
            "description": " canvas height",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getHeight": {
      "location": {
        "start": {
          "line": 114,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the height attribute of the canvas element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} canvas height",
            "type": "Integer",
            "description": " canvas height"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getContext2d": {
      "location": {
        "start": {
          "line": 126,
          "column": 4
        },
        "end": {
          "line": 128,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the canvas' 2D rendering context\n[<a href=\"http:\nAll drawing operations are performed on this context."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{CanvasRenderingContext2D} The 2D rendering context.",
            "type": "CanvasRenderingContext2D",
            "description": " The 2D rendering context."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "reset"
    }
  },
  "descendants": []
}